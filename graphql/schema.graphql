"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
  me: User @auth
  teams: [Team!]! @all
  team(id: ID! @eq): Team @find

  players: [Player!]! @all 
  player(id: ID! @eq): Player @find 

}

type Mutation {
createTeam(teamName: String!, user_id: ID!, baseTeam: String!): Team! @create
updateTeam(id: ID!, teamName: String, user_id: ID, baseTeam: String): Team @update
upsertTeam(id: ID!, teamName: String, user_id: ID, baseTeam: String): Team @upsert
deleteTeam(id: ID!): Team @delete
createUser(
      name: String! @rules(apply: ["required", "min:4"]),
      email: String! @rules(apply: ["email", "unique:users"]),
      password: String! @rules(apply:["min:6"])@hash
      ): User! @create
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime! 
    teams: [Team!]! @hasMany
}

type Team {
  id: ID!
  teamName: String!          
  user: User @belongsTo         
  baseTeam: String 
  players: [Player!]! @hasMany         
}

type Player {
  id: ID!
  playerNr: Int
  playerName: String!
  position: String!
  MA: Int
  ST: Int
  AG: Int
  PA: Int
  AV: Int
  value: Int
  team: Team! @belongsTo 
}

